<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>ssh on darlin.io</title><link>https://darlin.io/tags/ssh/</link><description>Recent content in ssh on darlin.io</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 04 Jan 2023 22:01:12 -0500</lastBuildDate><atom:link href="https://darlin.io/tags/ssh/index.xml" rel="self" type="application/rss+xml"/><item><title>connecting to a remote Docker daemon over SSH pt2</title><link>https://darlin.io/posts/remote-docker-daemon-pt-2/</link><pubDate>Wed, 04 Jan 2023 22:01:12 -0500</pubDate><guid>https://darlin.io/posts/remote-docker-daemon-pt-2/</guid><description>I previously connected to a remote docker daemon using an SSH tunnel . While my solution worked, I wanted to explore a more elegant solution using docker contexts.
I initially attempted to use docker contexts as-is:
docker context create remote --docker &amp;#34;host=ssh://user@remote-machine&amp;#34; And then attempted to use it and perform a sanity check:
docker context use remote docker ps However, I received an error like the following:
# other output sh: docker: command not found After some searching, I was able to get to a solution.</description></item><item><title>connecting to a remote Docker daemon over SSH</title><link>https://darlin.io/posts/remote-docker-daemon/</link><pubDate>Mon, 26 Dec 2022 08:15:15 -0500</pubDate><guid>https://darlin.io/posts/remote-docker-daemon/</guid><description>Recently, I was working on a project that required connecting to a Docker daemon running on a remote machine. This is a common use case for Docker, and there are a few ways to accomplish it. I will describe the method I used.
motivation Typically, I use Docker on my local machine, but this project upended that workflow.
For my use-case, I needed to interact with a remote daemon because:</description></item></channel></rss>